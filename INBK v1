' =========================================================================================
' MACRO PRINCIPAL DE TRANSFORMACIÓN (Versión Final con Ordenación por ID de Par y Legal Entity)
' =========================================================================================
Sub TransformarDatosInbk()

    ' --- DECLARACIÓN DE VARIABLES ---
    Dim wb As Workbook
    Dim wsInput As Worksheet, wsOutput As Worksheet, wsRates As Worksheet, wsAccounts As Worksheet
    Dim lastRowInput As Long, lastRowRates As Long, lastRowAccounts As Long
    Dim outputRow As Long
    Dim i As Long, j As Long, k As Long
    
    Dim exchangeRates As Object, accountList As Object, legalEntities As Object
    
    Dim txnDate As Date
    Dim lookupCode As String, legalEntity As String
    
    Dim flowType As String, flowTypeL As String
    Dim accountAmount As Double
    Dim signedAmount As Double
    Dim txnDirection As String
    
    Dim originalCurrency As String, targetCurrency As String
    Dim rate As Double
    Dim rateKey As String
    
    Application.ScreenUpdating = False
    Application.Calculation = xlCalculationManual

    ' --- CONFIGURACIÓN DE HOJAS DE CÁLCULO ---
    Set wb = ThisWorkbook
    
    On Error Resume Next
    Set wsInput = wb.Sheets("Hoja 1")
    Set wsRates = wb.Sheets("Tipos de Cambio")
    Set wsAccounts = wb.Sheets("Listado de Cuentas")
    On Error GoTo 0
    
    If wsInput Is Nothing Then MsgBox "Error: No se encontró la hoja 'Hoja 1'.", vbCritical: GoTo Cleanup
    If wsRates Is Nothing Then MsgBox "Error: No se encontró la hoja 'Tipos de Cambio'.", vbCritical: GoTo Cleanup
    If wsAccounts Is Nothing Then MsgBox "Error: No se encontró la hoja 'Listado de Cuentas'.", vbCritical: GoTo Cleanup

    ' --- CARGA DE DATOS DE BÚSQUEDA ---
    Set exchangeRates = CreateObject("Scripting.Dictionary")
    Set accountList = CreateObject("Scripting.Dictionary")
    Set legalEntities = CreateObject("Scripting.Dictionary")
    
    lastRowRates = wsRates.Cells(wsRates.Rows.Count, "A").End(xlUp).row
    Dim sourceCurrency As String
    Dim col As Long
    Dim header As String
    Dim headerParts() As String
    
    For j = 2 To lastRowRates
        Dim rateDate As Date: rateDate = CDate(wsRates.Cells(j, "A").Value)
        
        For col = 2 To wsRates.Cells(1, wsRates.Columns.Count).End(xlToLeft).Column
            header = Trim(wsRates.Cells(1, col).Value)
            
            If InStr(header, "/") > 0 Then
                headerParts = Split(header, "/")
                sourceCurrency = UCase(Trim(headerParts(0)))
                Dim rateTargetCurrency As String: rateTargetCurrency = UCase(Trim(headerParts(1)))
                
                rate = ConvertirADouble(wsRates.Cells(j, col).Text)
                rateKey = Format(rateDate, "dd/mm/yyyy") & "|" & sourceCurrency & "|" & rateTargetCurrency
                
                If Not exchangeRates.Exists(rateKey) Then
                    exchangeRates.Add rateKey, rate
                End If
            End If
        Next col
    Next j
    
    lastRowAccounts = wsAccounts.Cells(wsAccounts.Rows.Count, "M").End(xlUp).row
    For k = 2 To lastRowAccounts
        legalEntity = Trim(wsAccounts.Cells(k, "B").Value)
        Dim kyribaCode As String: kyribaCode = Trim(wsAccounts.Cells(k, "M").Value)
        Dim qbName As String: qbName = Trim(wsAccounts.Cells(k, "O").Value)
        If kyribaCode <> "" Then
            If Not accountList.Exists(kyribaCode) Then accountList.Add kyribaCode, qbName
            If Not legalEntities.Exists(kyribaCode) Then legalEntities.Add kyribaCode, legalEntity
        End If
    Next k

    ' --- PREPARACIÓN DE LA HOJA DE SALIDA "Tabla Transformada" ---
    Application.DisplayAlerts = False
    On Error Resume Next
    wb.Sheets("Tabla Transformada").Delete
    On Error GoTo 0
    Application.DisplayAlerts = True
    
    Set wsOutput = wb.Sheets.Add(After:=wsInput)
    wsOutput.Name = "Tabla Transformada"

    With wsOutput
        .Range("A1:L1") = Array("RefNumber", "TxnDate", "Account", "Amount", "Entity", "Description", "Currency", "OrigAmountF_Helper", "TxnDirectionHelper", "AccountCodeHelper", "PairID_Helper", "LegalEntity_Helper")
    End With

    ' --- PROCESAMIENTO DE DATOS ---
    lastRowInput = wsInput.Cells(wsInput.Rows.Count, "F").End(xlUp).row
    outputRow = 2

    For i = 2 To lastRowInput
        If InStr(UCase(Trim(wsInput.Cells(i, "F").Value)), "INBK") > 0 Then
            
            txnDate = CDate(wsInput.Cells(i, "H").Value)
            wsOutput.Cells(outputRow, "B").Value = txnDate
            wsOutput.Cells(outputRow, "B").NumberFormat = "dd/mm/yyyy"
            wsOutput.Cells(outputRow, "A").Value = Day(txnDate)

            lookupCode = Trim(wsInput.Cells(i, "D").Value)
            If accountList.Exists(lookupCode) Then
                wsOutput.Cells(outputRow, "C").Value = accountList(lookupCode)
                If legalEntities.Exists(lookupCode) Then
                    wsOutput.Cells(outputRow, "L").Value = legalEntities(lookupCode)
                Else
                    wsOutput.Cells(outputRow, "L").Value = "Entidad no encontrada"
                End If
            Else
                wsOutput.Cells(outputRow, "C").Value = "Cuenta no encontrada"
                wsOutput.Cells(outputRow, "L").Value = "Entidad no encontrada"
            End If
            
            flowType = Trim(wsInput.Cells(i, "K").Value)
            flowTypeL = Trim(wsInput.Cells(i, "L").Text)
            accountAmount = ConvertirADouble(flowTypeL)
            
            Dim signK As String: signK = Left(flowType, 1)
            Dim signL As String: signL = Left(flowTypeL, 1)
            
            If signL <> "+" And signL <> "-" Then
                signL = "+"
            End If
            
            If signK = "+" And signL = "+" Then
                txnDirection = "IN"
                signedAmount = Abs(accountAmount)
            ElseIf (signK = "-" And signL = "+") Or (signK = "+" And signL = "-") Then
                txnDirection = "OUT"
                signedAmount = -Abs(accountAmount)
            Else
                txnDirection = "UNKNOWN"
                signedAmount = accountAmount
            End If
            
            originalCurrency = UCase(Right(flowType, 3))
            
            Dim currentLegalEntity As String
            currentLegalEntity = wsOutput.Cells(outputRow, "L").Value
            If currentLegalEntity = "LARSTAL DENMARK APS" Or currentLegalEntity = "AP DIGITAL SOLUTIONS (CY) LTD" Or currentLegalEntity = "LARSTAL LIMITED" Then
                targetCurrency = "EUR"
            Else
                targetCurrency = "USD"
            End If
            wsOutput.Cells(outputRow, "G").Value = targetCurrency
            
            If originalCurrency = targetCurrency Then
                wsOutput.Cells(outputRow, "D").Value = signedAmount
            Else
                rateKey = Format(txnDate, "dd/mm/yyyy") & "|" & originalCurrency & "|" & targetCurrency
                
                If exchangeRates.Exists(rateKey) Then
                    rate = exchangeRates(rateKey)
                    If rate <> 0 Then
                        wsOutput.Cells(outputRow, "D").Value = signedAmount / rate
                    Else
                        wsOutput.Cells(outputRow, "D").Value = 0
                    End If
                Else
                    wsOutput.Cells(outputRow, "D").Value = 0
                End If
            End If
            
            wsOutput.Cells(outputRow, "D").NumberFormat = "#,##0.00"
            wsOutput.Cells(outputRow, "E").Value = ""
            wsOutput.Cells(outputRow, "F").Value = wsInput.Cells(i, "N").Value
            wsOutput.Cells(outputRow, "H").Value = Abs(ConvertirADouble(flowTypeL))
            wsOutput.Cells(outputRow, "I").Value = txnDirection
            wsOutput.Cells(outputRow, "J").Value = lookupCode
            
            outputRow = outputRow + 1
        End If
    Next i

    ' --- FINALIZACIÓN Y FORMATEO DE "Tabla Transformada" ---
    If outputRow > 2 Then
        Dim lastDataRow As Long
        Dim greenColor As Long, orangeColor As Long
        Dim rowNum As Long, pairIDCounter As Long
        Dim amountKey As Variant
        Dim alreadyMatched As Object, exactInRows As Object, exactOutRows As Object, origInRows As Object, origOutRows As Object
        Dim direction As String, accountCode As String
        Dim outData As Variant, inData As Variant
        Dim finalAmount As Double, origAmount As Double

        lastDataRow = outputRow - 1
        greenColor = RGB(198, 239, 206)
        orangeColor = RGB(255, 219, 198)
        pairIDCounter = 1
        Set alreadyMatched = CreateObject("Scripting.Dictionary")

        ' --- 1. LÓGICA DE CRUCE VERDE ---
        Set exactInRows = CreateObject("Scripting.Dictionary")
        Set exactOutRows = CreateObject("Scripting.Dictionary")

        For rowNum = 2 To lastDataRow
            finalAmount = Abs(wsOutput.Cells(rowNum, "D").Value)
            If finalAmount > 0 Then
                direction = wsOutput.Cells(rowNum, "I").Value
                accountCode = wsOutput.Cells(rowNum, "J").Value
                legalEntity = wsOutput.Cells(rowNum, "L").Value 

                If direction = "IN" Then
                    If Not exactInRows.Exists(finalAmount) Then Set exactInRows(finalAmount) = New Collection
                    exactInRows(finalAmount).Add Array(rowNum, accountCode, legalEntity)
                ElseIf direction = "OUT" Then
                    If Not exactOutRows.Exists(finalAmount) Then Set exactOutRows(finalAmount) = New Collection
                    exactOutRows(finalAmount).Add Array(rowNum, accountCode, legalEntity)
                End If
            End If
        Next rowNum

        For Each amountKey In exactOutRows.Keys
            If exactInRows.Exists(amountKey) Then
                For Each outData In exactOutRows(amountKey)
                    If Not alreadyMatched.Exists(outData(0)) Then
                        For Each inData In exactInRows(amountKey)
                            If Not alreadyMatched.Exists(inData(0)) And inData(1) <> outData(1) And inData(2) = outData(2) Then
                                wsOutput.Cells(inData(0), "D").Value = Abs(wsOutput.Cells(outData(0), "D").Value)
                                wsOutput.Cells(inData(0), "B").Value = wsOutput.Cells(outData(0), "B").Value
                                wsOutput.Cells(inData(0), "A").Value = wsOutput.Cells(outData(0), "A").Value

                                wsOutput.Cells(outData(0), "D").Interior.Color = greenColor
                                wsOutput.Cells(inData(0), "D").Interior.Color = greenColor
                                
                                wsOutput.Cells(outData(0), "K").Value = pairIDCounter
                                wsOutput.Cells(inData(0), "K").Value = pairIDCounter
                                pairIDCounter = pairIDCounter + 1
                                
                                alreadyMatched.Add outData(0), True
                                alreadyMatched.Add inData(0), True
                                Exit For
                            End If
                        Next inData
                    End If
                Next outData
            End If
        Next amountKey

        ' --- 2. LÓGICA DE CRUCE NARANJA ---
        Set origInRows = CreateObject("Scripting.Dictionary")
        Set origOutRows = CreateObject("Scripting.Dictionary")

        For rowNum = 2 To lastDataRow
            If Not alreadyMatched.Exists(rowNum) Then
                origAmount = wsOutput.Cells(rowNum, "H").Value
                If origAmount > 0 Then
                    direction = wsOutput.Cells(rowNum, "I").Value
                    accountCode = wsOutput.Cells(rowNum, "J").Value
                    legalEntity = wsOutput.Cells(rowNum, "L").Value
                    
                    If direction = "IN" Then
                        If Not origInRows.Exists(origAmount) Then Set origInRows(origAmount) = New Collection
                        origInRows(origAmount).Add Array(rowNum, accountCode, legalEntity)
                    ElseIf direction = "OUT" Then
                        If Not origOutRows.Exists(origAmount) Then Set origOutRows(origAmount) = New Collection
                        origOutRows(origAmount).Add Array(rowNum, accountCode, legalEntity)
                    End If
                End If
            End If
        Next rowNum
        
        For Each amountKey In origOutRows.Keys
            If origInRows.Exists(amountKey) Then
                For Each outData In origOutRows(amountKey)
                    If Not alreadyMatched.Exists(outData(0)) Then
                        For Each inData In origInRows(amountKey)
                            If Not alreadyMatched.Exists(inData(0)) And inData(1) <> outData(1) And inData(2) = outData(2) Then
                                wsOutput.Cells(inData(0), "D").Value = Abs(wsOutput.Cells(outData(0), "D").Value)
                                wsOutput.Cells(inData(0), "B").Value = wsOutput.Cells(outData(0), "B").Value
                                wsOutput.Cells(inData(0), "A").Value = wsOutput.Cells(outData(0), "A").Value
                                
                                wsOutput.Cells(outData(0), "D").Interior.Color = orangeColor
                                wsOutput.Cells(inData(0), "D").Interior.Color = orangeColor

                                wsOutput.Cells(outData(0), "K").Value = pairIDCounter
                                wsOutput.Cells(inData(0), "K").Value = pairIDCounter
                                pairIDCounter = pairIDCounter + 1
                                
                                alreadyMatched.Add outData(0), True
                                alreadyMatched.Add inData(0), True
                                Exit For
                            End If
                        Next inData
                    End If
                Next outData
            End If
        Next amountKey

        ' --- 3. ORDENACIÓN FINAL (CON ID DE PAR) ---
        With wsOutput.Sort
            .SortFields.Clear
            .SortFields.Add2 key:=wsOutput.Range("B2:B" & lastDataRow), SortOn:=xlSortOnValues, Order:=xlAscending
            .SortFields.Add2 key:=wsOutput.Range("K2:K" & lastDataRow), SortOn:=xlSortOnValues, Order:=xlAscending
            .SortFields.Add2 key:=wsOutput.Range("D2:D" & lastDataRow), SortOn:=xlSortOnValues, Order:=xlAscending
            
            .SetRange wsOutput.Range("A1:L" & lastDataRow)
            .Header = xlYes
            .MatchCase = False
            .Orientation = xlTopToBottom
            .SortMethod = xlPinYin
            .Apply
        End With
        
        ' --- 4. CAMBIO DE SIGNO EN COLUMNA D ---
        For rowNum = 2 To lastDataRow
            wsOutput.Cells(rowNum, "D").Value = wsOutput.Cells(rowNum, "D").Value * -1
        Next rowNum
        
    End If
    
    wsOutput.Columns.AutoFit

    ' --- LLAMADA A LA SUBRUTINA PARA CREAR EL REPORTE FINAL ---
    Call CrearReporteFinal(wsOutput)
    
Cleanup:
    Application.ScreenUpdating = True
    Application.Calculation = xlCalculationAutomatic
End Sub

' =========================================================================================
' SUBRUTINA PARA CREAR EL ARCHIVO DE REPORTE FINAL
' =========================================================================================
Private Sub CrearReporteFinal(ByVal wsSource As Worksheet)
    Dim wbNew As Workbook
    Dim wsNew As Worksheet, wsReview As Worksheet
    Dim lastRow As Long, rowNum As Long
    Dim orangeColor As Long, greenColor As Long
    Dim sheetName As String
    Dim processedRows As Object
    Dim savePath As Variant

    If wsSource Is Nothing Then Exit Sub
    lastRow = wsSource.Cells(wsSource.Rows.Count, "A").End(xlUp).row
    If lastRow < 2 Then Exit Sub

    Set wbNew = Workbooks.Add
    Set wsReview = wbNew.Worksheets(1)
    wsReview.Name = "To be reviewed"
    wsSource.Rows(1).Copy Destination:=wsReview.Rows(1)
    
    Set processedRows = CreateObject("Scripting.Dictionary")
    orangeColor = RGB(255, 219, 198)
    greenColor = RGB(198, 239, 206)

    For rowNum = 2 To lastRow
        If processedRows.Exists(rowNum) Then GoTo NextIteration

        Dim cellColor As Long: cellColor = wsSource.Cells(rowNum, "D").Interior.Color
        
        If (cellColor = orangeColor Or cellColor = greenColor) And wsSource.Cells(rowNum, "D").Value > 0 Then
            
            Dim partnerRowNum As Long: partnerRowNum = rowNum + 1
            sheetName = Left(wsSource.Cells(rowNum, "C").Value, 31)
            
            Dim invalidChars As Variant
            Dim charIdx As Long
            invalidChars = Array(":", "\", "/", "?", "*", "[", "]")
            For charIdx = LBound(invalidChars) To UBound(invalidChars)
                sheetName = Replace(sheetName, invalidChars(charIdx), "")
            Next charIdx
            
            If Not SheetExists(wbNew, sheetName) Then
                Set wsNew = wbNew.Worksheets.Add(After:=wbNew.Worksheets(wbNew.Worksheets.Count))
                wsNew.Name = sheetName
                wsSource.Rows(1).Copy Destination:=wsNew.Rows(1)
            Else
                Set wsNew = wbNew.Worksheets(sheetName)
            End If
            
            Dim nextDestRow As Long
            nextDestRow = wsNew.Cells(wsNew.Rows.Count, "A").End(xlUp).row + 1
            wsSource.Rows(rowNum).Copy Destination:=wsNew.Rows(nextDestRow)
            wsSource.Rows(partnerRowNum).Copy Destination:=wsNew.Rows(nextDestRow + 1)
            
            processedRows.Add rowNum, True
            processedRows.Add partnerRowNum, True
        End If
NextIteration:
    Next rowNum
    
    
    Dim nextReviewRow As Long
    nextReviewRow = wsReview.Cells(wsReview.Rows.Count, "A").End(xlUp).row + 1
    
    For rowNum = 2 To lastRow
        If Not processedRows.Exists(rowNum) Then
            wsSource.Rows(rowNum).Copy Destination:=wsReview.Rows(nextReviewRow)
            nextReviewRow = nextReviewRow + 1
        End If
    Next rowNum
    
    For Each wsNew In wbNew.Worksheets
        wsNew.Columns("H:L").Delete
        wsNew.Columns.AutoFit
    Next wsNew
    
    Application.DisplayAlerts = False
    savePath = Application.GetSaveAsFilename(InitialFileName:="Reporte de Transferencias Cruzadas.xlsx", FileFilter:="Excel Files (*.xlsx), *.xlsx")

    If savePath <> False Then
        wbNew.SaveAs Filename:=savePath
        MsgBox "Proceso de transformación y reporte completado con éxito." & vbCrLf & "El nuevo archivo ha sido guardado en: " & savePath, vbInformation
    Else
        MsgBox "Proceso de transformación completado, pero el archivo de reporte no fue guardado.", vbExclamation
    End If
    Application.DisplayAlerts = True
    
End Sub

' =========================================================================================
' FUNCIÓN AUXILIAR PARA VERIFICAR SI UNA HOJA EXISTE
' =========================================================================================
Private Function SheetExists(wb As Workbook, sheetName As String) As Boolean
    Dim ws As Worksheet
    On Error Resume Next
    Set ws = wb.Sheets(sheetName)
    If Not ws Is Nothing Then SheetExists = True Else SheetExists = False
    On Error GoTo 0
End Function

' =========================================================================================
' FUNCIÓN AUXILIAR PARA CONVERTIR TEXTO A NÚMERO
' =========================================================================================
Private Function ConvertirADouble(ByVal numberString As String) As Double
    On Error GoTo ErrorHandler
    Dim cleanString As String, lastCommaPos As Integer, lastPeriodPos As Integer
    cleanString = Trim(numberString)
    lastCommaPos = InStrRev(cleanString, ",")
    lastPeriodPos = InStrRev(cleanString, ".")
    If lastCommaPos > lastPeriodPos Then
        cleanString = Replace(cleanString, ".", "")
        cleanString = Replace(cleanString, ",", ".")
    ElseIf lastPeriodPos > lastCommaPos Then
        cleanString = Replace(cleanString, ",", "")
    Else
        cleanString = Replace(cleanString, ",", ".")
    End If
    If IsNumeric(cleanString) Then ConvertirADouble = Val(cleanString) Else ConvertirADouble = 0
    Exit Function
ErrorHandler:
    ConvertirADouble = 0
End Function
