' =========================================================================================
' MACRO PRINCIPAL DE TRANSFORMACIÓN (Versión Final con Ordenación por ID de Par y Legal Entity)
' =========================================================================================
Sub TransformarDatosInbk()

    ' --- DECLARACIÓN DE VARIABLES ---
    Dim wb As Workbook
    Dim wsInput As Worksheet, wsOutput As Worksheet, wsAccounts As Worksheet
    Dim lastRowInput As Long, lastRowAccounts As Long
    Dim outputRow As Long
    Dim i As Long, k As Long
    
    Dim accountList As Object, legalEntities As Object, sheetNameList As Object, bankChargesList As Object
    
    Dim txnDate As Date
    Dim lookupCode As String, legalEntity As String
    
    Dim flowType As String, flowTypeL As String
    Dim finalAmountFromJ As Double
    Dim signedAmount As Double
    Dim txnDirection As String
    
    Application.ScreenUpdating = False
    Application.Calculation = xlCalculationManual

    ' --- CONFIGURACIÓN DE HOJAS DE CÁLCULO ---
    Set wb = ThisWorkbook
    
    On Error Resume Next
    Set wsInput = wb.Sheets("Hoja 1")
    Set wsAccounts = wb.Sheets("Listado de Cuentas")
    On Error GoTo 0
    
    If wsInput Is Nothing Then MsgBox "Error: No se encontró la hoja 'Hoja 1'.", vbCritical: GoTo Cleanup
    If wsAccounts Is Nothing Then MsgBox "Error: No se encontró la hoja 'Listado de Cuentas'.", vbCritical: GoTo Cleanup

    ' --- CARGA DE DATOS DE BÚSQUEDA ---
    Set accountList = CreateObject("Scripting.Dictionary")
    Set legalEntities = CreateObject("Scripting.Dictionary")
    Set sheetNameList = CreateObject("Scripting.Dictionary")
    Set bankChargesList = CreateObject("Scripting.Dictionary")
    
    lastRowAccounts = wsAccounts.Cells(wsAccounts.Rows.Count, "M").End(xlUp).row
    For k = 2 To lastRowAccounts
        legalEntity = Trim(wsAccounts.Cells(k, "B").Value)
        Dim kyribaCode As String: kyribaCode = Trim(wsAccounts.Cells(k, "M").Value)
        Dim qbName As String: qbName = Trim(wsAccounts.Cells(k, "O").Value)
        Dim sheetNameForReport As String: sheetNameForReport = Trim(wsAccounts.Cells(k, "M").Value)
        Dim bankChargeName As String: bankChargeName = Trim(wsAccounts.Cells(k, "P").Value)
        
        If kyribaCode <> "" Then
            If Not accountList.Exists(kyribaCode) Then accountList.Add kyribaCode, qbName
            If Not legalEntities.Exists(kyribaCode) Then legalEntities.Add kyribaCode, legalEntity
            If Not sheetNameList.Exists(kyribaCode) Then sheetNameList.Add kyribaCode, sheetNameForReport
            If Not bankChargesList.Exists(kyribaCode) Then bankChargesList.Add kyribaCode, bankChargeName
        End If
    Next k

    ' --- PREPARACIÓN DE LA HOJA DE SALIDA "Tabla Transformada" ---
    Application.DisplayAlerts = False
    On Error Resume Next
    wb.Sheets("Tabla Transformada").Delete
    On Error GoTo 0
    Application.DisplayAlerts = True
    
    Set wsOutput = wb.Sheets.Add(After:=wsInput)
    wsOutput.Name = "Tabla Transformada"

    With wsOutput
        .Range("A1:M1") = Array("RefNumber", "TxnDate", "Account", "Amount", "Entity", "Description", "Currency", "OrigAmountF_Helper", "TxnDirectionHelper", "AccountCodeHelper", "PairID_Helper", "LegalEntity_Helper", "SheetName_Helper")
    End With

    ' --- PROCESAMIENTO DE DATOS ---
    lastRowInput = wsInput.Cells(wsInput.Rows.Count, "F").End(xlUp).row
    outputRow = 2

    For i = 2 To lastRowInput
        
        Dim transactionType As String
        transactionType = UCase(Trim(wsInput.Cells(i, "F").Value))
        
        If InStr(transactionType, "INBK") > 0 Then
            
            'INICIO DEL BLOQUE DE TRANSFORMACIÓN INBK
            
            txnDate = CDate(wsInput.Cells(i, "H").Value)
            wsOutput.Cells(outputRow, "B").Value = txnDate
            wsOutput.Cells(outputRow, "B").NumberFormat = "dd/mm/yyyy"
            wsOutput.Cells(outputRow, "A").Value = Day(txnDate)

            lookupCode = Trim(wsInput.Cells(i, "D").Value)
            If accountList.Exists(lookupCode) Then
                wsOutput.Cells(outputRow, "C").Value = accountList(lookupCode)
                If legalEntities.Exists(lookupCode) Then wsOutput.Cells(outputRow, "L").Value = legalEntities(lookupCode)
                If sheetNameList.Exists(lookupCode) Then wsOutput.Cells(outputRow, "M").Value = sheetNameList(lookupCode)
            Else
                wsOutput.Cells(outputRow, "C").Value = "Cuenta no encontrada"
                wsOutput.Cells(outputRow, "L").Value = "Entidad no encontrada"
                wsOutput.Cells(outputRow, "M").Value = "NombreHoja no encontrado"
            End If
            
            flowType = Trim(wsInput.Cells(i, "K").Value)
            flowTypeL = Trim(wsInput.Cells(i, "L").Text)
            finalAmountFromJ = ConvertirADouble(wsInput.Cells(i, "J").Text)
            
            Dim signK As String: signK = Left(flowType, 1)
            Dim signL As String: signL = Left(flowTypeL, 1)
            
            If signL <> "+" And signL <> "-" Then
                signL = "+"
            End If
            
            If signK = "+" And signL = "+" Then
                txnDirection = "IN"
                signedAmount = Abs(finalAmountFromJ)
            ElseIf (signK = "-" And signL = "+") Or (signK = "+" And signL = "-") Then
                txnDirection = "OUT"
                signedAmount = -Abs(finalAmountFromJ)
            Else
                txnDirection = "UNKNOWN"
                signedAmount = finalAmountFromJ
            End If
            
            wsOutput.Cells(outputRow, "D").Value = signedAmount
            
            Dim currentLegalEntity As String
            currentLegalEntity = wsOutput.Cells(outputRow, "L").Value
            If currentLegalEntity = "LARSTAL DENMARK APS" Or currentLegalEntity = "AP DIGITAL SOLUTIONS (CY) LTD" Or currentLegalEntity = "LARSTAL LIMITED" Then
                wsOutput.Cells(outputRow, "G").Value = "EUR"
            Else
                wsOutput.Cells(outputRow, "G").Value = "USD"
            End If
            
            wsOutput.Cells(outputRow, "D").NumberFormat = "#,##0.00"
            wsOutput.Cells(outputRow, "E").Value = ""
            wsOutput.Cells(outputRow, "F").Value = wsInput.Cells(i, "N").Value
            wsOutput.Cells(outputRow, "H").Value = Abs(ConvertirADouble(flowTypeL))
            wsOutput.Cells(outputRow, "I").Value = txnDirection
            wsOutput.Cells(outputRow, "J").Value = lookupCode
            
            outputRow = outputRow + 1
        
        ElseIf InStr(transactionType, "TRFF") > 0 Or InStr(transactionType, "MNTF") > 0 Then
            
            ' == INICIO DEL BLOQUE DE TRANSFORMACIÓN TRFF/MNTF ==
            
            txnDate = CDate(wsInput.Cells(i, "H").Value)
            wsOutput.Cells(outputRow, "B").Value = txnDate
            wsOutput.Cells(outputRow, "B").NumberFormat = "dd/mm/yyyy"
            wsOutput.Cells(outputRow, "A").Value = Day(txnDate)
            
            lookupCode = Trim(wsInput.Cells(i, "D").Value)
            If accountList.Exists(lookupCode) Then
                wsOutput.Cells(outputRow, "C").Value = accountList(lookupCode)
                If legalEntities.Exists(lookupCode) Then wsOutput.Cells(outputRow, "L").Value = legalEntities(lookupCode)
                If sheetNameList.Exists(lookupCode) Then wsOutput.Cells(outputRow, "M").Value = sheetNameList(lookupCode)
            Else
                wsOutput.Cells(outputRow, "C").Value = "Cuenta no encontrada"
                wsOutput.Cells(outputRow, "L").Value = "Entidad no encontrada"
                wsOutput.Cells(outputRow, "M").Value = "NombreHoja no encontrado"
            End If
            
            ' --- MODIFICACIÓN AQUÍ: Nueva lógica para el signo del importe ---
            Dim amountFromJ As Double
            Dim signFromI As String
            Dim finalAmount As Double
            
            amountFromJ = ConvertirADouble(wsInput.Cells(i, "J").Text)
            signFromI = Left(Trim(wsInput.Cells(i, "I").Text), 1)
            
            If signFromI = "-" Then
                finalAmount = amountFromJ * -1 ' Invierte el signo de J si I es negativo
            Else
                finalAmount = amountFromJ ' Mantiene el signo de J si I es positivo
            End If
            
            wsOutput.Cells(outputRow, "D").Value = finalAmount
            wsOutput.Cells(outputRow, "D").NumberFormat = "#,##0.00"
            wsOutput.Cells(outputRow, "E").Value = ""
            wsOutput.Cells(outputRow, "F").Value = wsInput.Cells(i, "N").Value
            
            If wsOutput.Cells(outputRow, "L").Value = "LARSTAL DENMARK APS" Or wsOutput.Cells(outputRow, "L").Value = "AP DIGITAL SOLUTIONS (CY) LTD" Or wsOutput.Cells(outputRow, "L").Value = "LARSTAL LIMITED" Then
                wsOutput.Cells(outputRow, "G").Value = "EUR"
            Else
                wsOutput.Cells(outputRow, "G").Value = "USD"
            End If

            wsOutput.Cells(outputRow, "I").Value = "OUT"
            wsOutput.Cells(outputRow, "J").Value = lookupCode
            wsOutput.Cells(outputRow, "K").Value = "TRF" & i
            
            outputRow = outputRow + 1
            wsOutput.Rows(outputRow - 1).Copy Destination:=wsOutput.Rows(outputRow)
            If bankChargesList.Exists(lookupCode) Then
                wsOutput.Cells(outputRow, "C").Value = bankChargesList(lookupCode)
            Else
                wsOutput.Cells(outputRow, "C").Value = "Cargo no encontrado"
            End If
            wsOutput.Cells(outputRow, "D").Value = finalAmount * -1
            wsOutput.Cells(outputRow, "I").Value = "IN"
            
            outputRow = outputRow + 1

        End If
    Next i

    ' --- FINALIZACIÓN Y FORMATEO DE "Tabla Transformada" ---
    If outputRow > 2 Then
        Dim lastDataRow As Long
        Dim greenColor As Long, orangeColor As Long
        Dim rowNum As Long, pairIDCounter As Long
        Dim amountKey As Variant
        Dim alreadyMatched As Object, exactInRows As Object, exactOutRows As Object, origInRows As Object, origOutRows As Object
        Dim direction As String, accountCode As String
        Dim outData As Variant, inData As Variant
        
        lastDataRow = outputRow - 1
        greenColor = RGB(198, 239, 206)
        orangeColor = RGB(255, 219, 198)
        pairIDCounter = 1
        Set alreadyMatched = CreateObject("Scripting.Dictionary")

        ' --- 1. LÓGICA DE CRUCE VERDE ---
        Set exactInRows = CreateObject("Scripting.Dictionary")
        Set exactOutRows = CreateObject("Scripting.Dictionary")

        For rowNum = 2 To lastDataRow
            Dim currentFinalAmount As Double
            currentFinalAmount = Abs(wsOutput.Cells(rowNum, "D").Value)
            If currentFinalAmount > 0 And Left(wsOutput.Cells(rowNum, "K").Value, 3) <> "TRF" Then
                direction = wsOutput.Cells(rowNum, "I").Value
                accountCode = wsOutput.Cells(rowNum, "J").Value
                legalEntity = wsOutput.Cells(rowNum, "L").Value 

                If direction = "IN" Then
                    If Not exactInRows.Exists(currentFinalAmount) Then Set exactInRows(currentFinalAmount) = New Collection
                    exactInRows(currentFinalAmount).Add Array(rowNum, accountCode, legalEntity)
                ElseIf direction = "OUT" Then
                    If Not exactOutRows.Exists(currentFinalAmount) Then Set exactOutRows(currentFinalAmount) = New Collection
                    exactOutRows(currentFinalAmount).Add Array(rowNum, accountCode, legalEntity)
                End If
            End If
        Next rowNum

        For Each amountKey In exactOutRows.Keys
            If exactInRows.Exists(amountKey) Then
                For Each outData In exactOutRows(amountKey)
                    If Not alreadyMatched.Exists(outData(0)) Then
                        For Each inData In exactInRows(amountKey)
                            If Not alreadyMatched.Exists(inData(0)) And inData(1) <> outData(1) And inData(2) = outData(2) Then
                                wsOutput.Cells(inData(0), "D").Value = Abs(wsOutput.Cells(outData(0), "D").Value)
                                wsOutput.Cells(inData(0), "B").Value = wsOutput.Cells(outData(0), "B").Value
                                wsOutput.Cells(inData(0), "A").Value = wsOutput.Cells(outData(0), "A").Value

                                wsOutput.Cells(outData(0), "D").Interior.Color = greenColor
                                wsOutput.Cells(inData(0), "D").Interior.Color = greenColor
                                
                                wsOutput.Cells(outData(0), "K").Value = pairIDCounter
                                wsOutput.Cells(inData(0), "K").Value = pairIDCounter
                                pairIDCounter = pairIDCounter + 1
                                
                                alreadyMatched.Add outData(0), True
                                alreadyMatched.Add inData(0), True
                                Exit For
                            End If
                        Next inData
                    End If
                Next outData
            End If
        Next amountKey

        ' --- 2. LÓGICA DE CRUCE NARANJA ---
        Set origInRows = CreateObject("Scripting.Dictionary")
        Set origOutRows = CreateObject("Scripting.Dictionary")

        For rowNum = 2 To lastDataRow
            If Not alreadyMatched.Exists(rowNum) And Left(wsOutput.Cells(rowNum, "K").Value, 3) <> "TRF" Then
                Dim currentOrigAmount As Double
                currentOrigAmount = wsOutput.Cells(rowNum, "H").Value
                If currentOrigAmount > 0 Then
                    direction = wsOutput.Cells(rowNum, "I").Value
                    accountCode = wsOutput.Cells(rowNum, "J").Value
                    legalEntity = wsOutput.Cells(rowNum, "L").Value
                    
                    If direction = "IN" Then
                        If Not origInRows.Exists(currentOrigAmount) Then Set origInRows(currentOrigAmount) = New Collection
                        origInRows(currentOrigAmount).Add Array(rowNum, accountCode, legalEntity)
                    ElseIf direction = "OUT" Then
                        If Not origOutRows.Exists(currentOrigAmount) Then Set origOutRows(currentOrigAmount) = New Collection
                        origOutRows(currentOrigAmount).Add Array(rowNum, accountCode, legalEntity)
                    End If
                End If
            End If
        Next rowNum
        
        For Each amountKey In origOutRows.Keys
            If origInRows.Exists(amountKey) Then
                For Each outData In origOutRows(amountKey)
                    If Not alreadyMatched.Exists(outData(0)) Then
                        For Each inData In origInRows(amountKey)
                            If Not alreadyMatched.Exists(inData(0)) And inData(1) <> outData(1) And inData(2) = outData(2) Then
                                wsOutput.Cells(inData(0), "D").Value = Abs(wsOutput.Cells(outData(0), "D").Value)
                                wsOutput.Cells(inData(0), "B").Value = wsOutput.Cells(outData(0), "B").Value
                                wsOutput.Cells(inData(0), "A").Value = wsOutput.Cells(outData(0), "A").Value
                                
                                wsOutput.Cells(outData(0), "D").Interior.Color = orangeColor
                                wsOutput.Cells(inData(0), "D").Interior.Color = orangeColor

                                wsOutput.Cells(outData(0), "K").Value = pairIDCounter
                                wsOutput.Cells(inData(0), "K").Value = pairIDCounter
                                pairIDCounter = pairIDCounter + 1
                                
                                alreadyMatched.Add outData(0), True
                                alreadyMatched.Add inData(0), True
                                Exit For
                            End If
                        Next inData
                    End If
                Next outData
            End If
        Next amountKey

        ' --- 3. ORDENACIÓN FINAL (CON ID DE PAR) ---
        With wsOutput.Sort
            .SortFields.Clear
            .SortFields.Add2 key:=wsOutput.Range("B2:B" & lastDataRow), SortOn:=xlSortOnValues, Order:=xlAscending
            .SortFields.Add2 key:=wsOutput.Range("K2:K" & lastDataRow), SortOn:=xlSortOnValues, Order:=xlAscending
            .SortFields.Add2 key:=wsOutput.Range("D2:D" & lastDataRow), SortOn:=xlSortOnValues, Order:=xlAscending
            
            .SetRange wsOutput.Range("A1:M" & lastDataRow)
            .Header = xlYes
            .MatchCase = False
            .Orientation = xlTopToBottom
            .SortMethod = xlPinYin
            .Apply
        End With
        
    End If
    
    wsOutput.Columns.AutoFit
    wsOutput.Columns("F").ColumnWidth = 80
    
    MsgBox "Proceso de transformación completado.", vbInformation
    
Cleanup:
    Application.ScreenUpdating = True
    Application.Calculation = xlCalculationAutomatic
End Sub

' =========================================================================================
' FUNCIÓN AUXILIAR PARA VERIFICAR SI UNA HOJA EXISTE
' =========================================================================================
Private Function SheetExists(wb As Workbook, sheetName As String) As Boolean
    Dim ws As Worksheet
    On Error Resume Next
    Set ws = wb.Sheets(sheetName)
    If Not ws Is Nothing Then SheetExists = True Else SheetExists = False
    On Error GoTo 0
End Function

' =========================================================================================
' FUNCIÓN AUXILIAR PARA CONVERTIR TEXTO A NÚMERO
' =========================================================================================
Private Function ConvertirADouble(ByVal numberString As String) As Double
    On Error GoTo ErrorHandler
    Dim cleanString As String, lastCommaPos As Integer, lastPeriodPos As Integer
    cleanString = Trim(numberString)
    lastCommaPos = InStrRev(cleanString, ",")
    lastPeriodPos = InStrRev(cleanString, ".")
    If lastCommaPos > lastPeriodPos Then
        cleanString = Replace(cleanString, ".", "")
        cleanString = Replace(cleanString, ",", ".")
    ElseIf lastPeriodPos > lastCommaPos Then
        cleanString = Replace(cleanString, ",", "")
    Else
        cleanString = Replace(cleanString, ",", ".")
    End If
    If IsNumeric(cleanString) Then ConvertirADouble = Val(cleanString) Else ConvertirADouble = 0
    Exit Function
ErrorHandler:
    ConvertirADouble = 0
End Function
